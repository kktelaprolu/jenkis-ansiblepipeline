---
- name: update apt
  become: true
  apt:
     update_cache: yes

- name: install basic package
  become: true
  apt: 
      name=vim state=present 

- name: Install add-apt-repository
  become: yes
  apt: name=software-properties-common state=latest

- name: Ensure apt-transport-https is installed.
  apt: name=apt-transport-https state=present

- name: Install UFW
  become: yes
  apt:
     name: ufw
     state: present
  tags: ngufw

- name: Setup rules
  become: yes
  command: "{{ item }}"
  with_items:
      - ufw default deny incoming
      - ufw allow ssh
      - ufw allow http
      - ufw allow https
      - ufw --force enable
  tags: ngufw

- name: install nginx
  become: yes
  apt:
     name: nginx
     state: present
  tags: installation

- name: Start Nginx
  service:
     name: nginx
     state: started
  tags: nginstall

- name: Add Nodesource apt key.
  apt_key:
     url: https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
     id: "68576280"
     state: present

- name: Add NodeSource repositories for Node.js.
  apt_repository:
     repo: "{{ item }}"
     state: present
  with_items:
      - "deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
      - "deb-src https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
  register: node_repo

- name: Update apt cache if repo was added.
  apt: update_cache=yes
  when: node_repo.changed
  tags: ['skip_ansible_lint']

- name: Ensure Node.js and npm are installed.
  apt: "name=nodejs={{ nodejs_version|regex_replace('x', '') }}* state=present"
  
- name: Ensure nodejs dependencies are installed
  become: yes
  become_method: sudo
  command: npm install express express-fileupload body-parser mysql ejs req-flash --save

- name: install python3
  become: yes
  become_method: sudo
  apt:
     name:
       - "python3-passlib"
     state: present
  tags:
     - nginx-revproxy
       #when:
       #- ansible_python['version']['major'] == 3

- name: Nginx reverse proxy
  become: yes
  become_method: sudo
  copy: src=default dest=/etc/nginx/sites-available/

- name: Stop Nginx
  become: yes
  service:
     name: nginx
     state: stopped
  tags: nginx-revproxy

- name: restart Nginx
  become: yes
  service:
     name: nginx
     state: started
  tags: nginx-revproxy

- name: NODE | Clone/Pull repo
  become: yes
  become_method: sudo
  git:
     repo: "{{repository}}"
     dest: /var/www/app
     update: no
  register: cloned

- name: NODE | Install npm deps
  shell: npm i
  register: npm_finished
  failed_when: '"ERR!" in npm_finished.stderr'
  when: cloned.changed
  args:
    chdir: /var/www/app

- name : Depedency express installation
  become: yes
  become_method: sudo
  npm: 
     name: express
     path: /var/www/app/

- name : Depedencies express-fileupload installation
  become: yes
  become_method: sudo
  npm:
     name: express-fileupload
     path: /var/www/app/


- name : Depedencies body-parser installation
  become: yes
  become_method: sudo
  npm:
     name: body-parser
     path: /var/www/app/

- name : Depedencies ejs installation
  become: yes
  become_method: sudo
  npm:
    name: ejs
    path: /var/www/app/

- name : Depedencies req-flash installation
  become: yes
  become_method: sudo
  npm:
     name: req-flash
     path: /var/www/app/


- name : Depedencies purplecheerio-wave installation
  become: yes
  become_method: sudo
  npm:
    name: purplecheerio-wave
    path: /var/www/app/

- name: NODE | Install pm2
  npm:
      name: pm2
      global: yes
      production: no
      state: present

      #- name: NODE | Stop APP
      #shell: pm2 stop app.js
      #args:
      #chdir: /var/www/jsapp

      #- name: NODE | Start APP
      #shell: pm2 start app.js
      #args:
      #chdir: /var/www/app
      #ignore_errors: yes
      #when: npm_finished.changed
